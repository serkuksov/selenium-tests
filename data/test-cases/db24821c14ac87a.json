{
  "uid" : "db24821c14ac87a",
  "name" : "Тестовый сценарий № 3",
  "fullName" : "tests.test_scenarios.TestScenarios#test_3",
  "historyId" : "6269f2ef8c59e1eb1987ef2dc7188ccf",
  "time" : {
    "start" : 1702836052813,
    "stop" : 1702836073219,
    "duration" : 20406
  },
  "description" : "Тестовый кейс № 3",
  "descriptionHtml" : "<p>Тестовый кейс № 3</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <tests.test_scenarios.TestScenarios object at 0x7ff844d9f350>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d5b9e87943c021c04eea0d44b6566d62\")>\n\n    @allure.title(\"Тестовый сценарий № 3\")\n    @allure.severity(\"Normal\")\n    def test_3(self, driver):\n        \"\"\"Тестовый кейс № 3\"\"\"\n        # открытие https://sbis.ru/\n        driver.get(IndexPageSbis.url_page)\n        index_page_sbis = IndexPageSbis(webdriver=driver)\n        assert \"СБИС\" in index_page_sbis.get_title()\n    \n        # переход на страницу для скачивания файлов\n        download_page_sbis = index_page_sbis.click_link_download_sbis()\n        assert \"Скачать\" in download_page_sbis.get_title()\n    \n        # кликнуть по кнопке СБИС Плагин\n        download_page_sbis.click_button_plugin()\n    \n        # проверить что активна кнопка Windows\n        assert download_page_sbis.is_active_button_windows() is True\n    \n        # скачивание файла\n>       download_page_sbis.download_file()\n\ntests/test_scenarios.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/sbis_pages.py:76: in download_file\n    self.click_to_elm(self.locators.DOWNLOAD_FILE)\npage_objects/base_page.py:86: in click_to_elm\n    elm = self.get_clickable_element(locator, element=element, timeout=timeout)\npage_objects/base_page.py:74: in get_clickable_element\n    return WebDriverWait(element, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d5b9e87943c021c04eea0d44b6566d62\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7ff844d56ac0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1702836051990,
      "stop" : 1702836052813,
      "duration" : 823
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Тестовый кейс № 3",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <tests.test_scenarios.TestScenarios object at 0x7ff844d9f350>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d5b9e87943c021c04eea0d44b6566d62\")>\n\n    @allure.title(\"Тестовый сценарий № 3\")\n    @allure.severity(\"Normal\")\n    def test_3(self, driver):\n        \"\"\"Тестовый кейс № 3\"\"\"\n        # открытие https://sbis.ru/\n        driver.get(IndexPageSbis.url_page)\n        index_page_sbis = IndexPageSbis(webdriver=driver)\n        assert \"СБИС\" in index_page_sbis.get_title()\n    \n        # переход на страницу для скачивания файлов\n        download_page_sbis = index_page_sbis.click_link_download_sbis()\n        assert \"Скачать\" in download_page_sbis.get_title()\n    \n        # кликнуть по кнопке СБИС Плагин\n        download_page_sbis.click_button_plugin()\n    \n        # проверить что активна кнопка Windows\n        assert download_page_sbis.is_active_button_windows() is True\n    \n        # скачивание файла\n>       download_page_sbis.download_file()\n\ntests/test_scenarios.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/sbis_pages.py:76: in download_file\n    self.click_to_elm(self.locators.DOWNLOAD_FILE)\npage_objects/base_page.py:86: in click_to_elm\n    elm = self.get_clickable_element(locator, element=element, timeout=timeout)\npage_objects/base_page.py:74: in get_clickable_element\n    return WebDriverWait(element, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d5b9e87943c021c04eea0d44b6566d62\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7ff844d56ac0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException",
    "steps" : [ {
      "name" : "Клик по кнопке Скачать СБИС",
      "time" : {
        "start" : 1702836057898,
        "stop" : 1702836061662,
        "duration" : 3764
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Клик по кнопке СБИС Плагин",
      "time" : {
        "start" : 1702836061664,
        "stop" : 1702836062772,
        "duration" : 1108
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Скачивание файла",
      "time" : {
        "start" : 1702836062789,
        "stop" : 1702836073218,
        "duration" : 10429
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/page_objects/sbis_pages.py\", line 76, in download_file\n    self.click_to_elm(self.locators.DOWNLOAD_FILE)\n  File \"/usr/workspace/page_objects/base_page.py\", line 86, in click_to_elm\n    elm = self.get_clickable_element(locator, element=element, timeout=timeout)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/workspace/page_objects/base_page.py\", line 74, in get_clickable_element\n    return WebDriverWait(element, timeout).until(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1702836073250,
      "stop" : 1702836073330,
      "duration" : 80
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "Normal"
  }, {
    "name" : "feature",
    "value" : "Тестовые сценарии"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_scenarios"
  }, {
    "name" : "subSuite",
    "value" : "TestScenarios"
  }, {
    "name" : "host",
    "value" : "1242a3acffbf"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_scenarios"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "db24821c14ac87a.json",
  "parameterValues" : [ ]
}